#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long;
use Bio::SeqIO;
use Bio::DB::Fasta;
use Cwd 'abs_path';
use MCE;
use MCE::Mutex;
use File::Temp qw(tempfile);
use Cwd qw(cwd);
use File::Basename;
use IPC::Open2;
use Data::Dumper;
#use Time::HiRes qw( clock_gettime clock_getres clock_nanosleep
#                    ITIMER_REAL ITIMER_VIRTUAL ITIMER_PROF
#		                        ITIMER_REALPROF );
				       

#my $begin_time2 = clock_gettime();


my $cwd = cwd();
my $predictor;
my $genome;
my $localmodel_transcriptome;

my $fasta;
my $ncpu = 1;
my $ghmm_model = "fixed_transition";
my $help;

GetOptions("cpu=i" => \$ncpu,
           "local_transcriptome|z=s" => \$localmodel_transcriptome,
           "fasta=s" => \$fasta,
           "help" => \$help);

my $witherror = 0;

sub print_help {
  print STDERR "USAGE: " . basename($0) . " [-g <genome> | -t <transcriptome> | -z <local transcriptome predictor> | -s <local genome predictor] -f <fasta file> [-c <number of cpu>] \n";
}

if ($help) {
  print_help();
  exit(-1);
}

if ($localmodel_transcriptome) {
  $predictor = abs_path($localmodel_transcriptome);
  $ghmm_model = "intronless";
} else {
  $witherror = 1;
  print STDERR "ERROR: missing transcriptome model !\n";
}


if (! defined ($fasta)) {
  $witherror = 1;
  print STDERR "ERROR: missing fasta file name !\n";
}

if($witherror) {
  print_help();
  exit(-1);
}

$fasta = abs_path($fasta);

my $ghmm_model_name = $ghmm_model;
$ghmm_model = "../ghmm/model/ghmm_$ghmm_model".".model";

#
# validate the fasta file.
#
my $ids = `grep ">" $fasta`;
my %is_uniq;
my @all_ids = split (/\n/, $ids);
if(($#all_ids ) < 0)  {
    print STDERR "ERROR: not a valid fasta file !\n";
    exit(-1);
}
foreach my $id ( @all_ids) {
  if(!($id =~ /^>/)){
    print STDERR "ERROR: not a valid fasta file !\n";
    print STDERR "ERROR: I have found this strange line: \"$id\"!\n";
    exit(-1);
  }
  if($id =~ /^>\s+/) {
    print STDERR "ERROR: your fasta contains a sequence with an empty identification\n";
    print STDERR "ERROR: try to remove the spaces that appear between '>' and the id: \"$id\"\n";
    exit(-1);
  }

  if($id =~ /^>\s*$/) {
    print STDERR "ERROR: your fasta contains a sequence with an empty identification\n";
    exit(-1);
  }
  if(defined $is_uniq{$id}) {
    print STDERR "ERROR: each sequence must have different identification, $id is duplicated\n";
    exit(-1);
  }
  $is_uniq{$id} = 1;
}

#
# We have to know the metaparameters
#
my %metapar;
my $metaparfile = "$predictor/cnf/meta.cnf";
# read metaparameters file
open (META, "<$metaparfile") or die "Cant open $metaparfile: $!\n";
foreach my $line (<META>)
  {
    chomp($line);
    my @fields = split(/\s*=\s*/, $line);
    # remove spaces;
    $fields[0] = trim_spaces($fields[0]);
    $fields[1] = trim_spaces($fields[1]);
    $metapar{$fields[0]} = $fields[1];
  }
close(META);

my %task_by_ghmm;


my $ntask=0;
my $db = Bio::DB::Fasta->new ("$fasta", '-reindex' => 1 );
foreach my $id ($db->ids) {
  my $seqobj = $db->get_Seq_by_id($id);
  my $length = $seqobj->length;
  my $seq = $db->seq("$id:1,$length");
  my $gc = gc_content($seq);

  my %task_entry;
  $task_entry{seqname} = $id;
  $task_entry{start} = 1;
  $task_entry{end} = $length;
  $task_entry{gc} = $gc;
  $task_entry{ghmm} = get_closest_ghmm_id($gc);
  $ntask ++ ;
  push @{$task_by_ghmm{$task_entry{ghmm}}}, \%task_entry;
}


my $batch_size = $ntask/($ncpu);
my @tasks;
foreach my $ghmmID (keys %task_by_ghmm) {
  my $b = 0;
  my @task_set;
  push @tasks,  \@task_set;
  foreach my $task_entry (@{$task_by_ghmm{$ghmmID}}) {
    if ($b >= $batch_size) {
      my @task_set;
      push @tasks,  \@task_set;
      $b = 0;
    }
    push @{$tasks[$#tasks]}, $task_entry;
    $b = $b + 1;
  }
}
# print STDERR Dumper (\@tasks)."\n";

my %seqs;
my $gtf_string = "";
my $a = MCE::Mutex->new;
undef $db; # destroy Bio::DB::Fasta

my $gid = 0;

sub preserve_order_pass{
  return sub {
  }
}
sub preserve_order_pass2 {
  my %tmp; my $order_id = 1;
  my %tmp2;
  return sub {
    my ($chunk_id, $tasks_ref, $data) = @_;
    my @result= @{$data};

    opendir (CWD, "$cwd") or die "Cant open $predictor/ghmm: $!\n";
    chdir(CWD); 
    close(CWD);
    my ($fh, $filename) = tempfile(
      SUFFIX   =>  '.tmp',
      UNLINK   =>  1,
      TEMPLATE =>  basename($0) . '-XXXXXXXXXXX');
    $filename = abs_path($filename);
    
    my %score_by_id;
    foreach my $seq (@result) {
      if(!defined $seq || $seq eq "") {
	$seq = "";
	print STDERR "ERROR $0: something wrong: $ghmm_model_name\n";
	return;
      }
      my $score = 0;
      if($seq =~ /(.+):(.+):(.+)/){
	my $id = $1;
	$score = $2;
	$id =~ /<(.+):(.+),(.+)/;
	$score_by_id{$1} = $score;
      }
      print $fh $seq."\n";
    }
    close($fh);

    opendir (PRED, "$predictor") or die "Cant open $predictor: $!\n";
    chdir(PRED);
    close(PRED);


    my $cmd = "./scripts/tops_to_gtf_".$ghmm_model_name.".pl < $filename 2> /dev/null\n";
    my $gtf_string = `$cmd`;

    my $flag = 0;
    $gid ++;
    foreach my $l (split (/\n/, $gtf_string)) {
      my @f = split(/\t/, $l);
      $f[1] = "CodAn";
      if( scalar (@f) > 3) {
	if($flag == 1) { 
	  if (($f[2] =~ /start/) && ($f[6] eq "+")) {
	    $gid ++;
	  } elsif (($f[2] =~ /stop/) && ($f[6] eq "-")) {
	    $gid ++;
	  }
	} else {
	  if (($f[2] =~ /start/) && ($f[6] eq "+")) {
	    print "\n";
	  } elsif (($f[2] =~ /stop/) && ($f[6] eq "-")) {
	    print "\n";
	  }
	}

	if($localmodel_transcriptome) {
	  $f[5] = $score_by_id{$f[0]};
	}
	my $gname = "CodAn.$gid";
	$f[8] = "gene_id \"$gname\"; transcript_id \"$gname\";\n";
	print join("\t", @f);
	$flag = 1;
      } else {
	print "\n";
      }
    }
    unlink $filename;
    return;
  }
}



my $mce2 = MCE->new (input_data=>\@tasks,  max_workers => $ncpu, chunk_size => 1, gather => preserve_order_pass2,
  user_func =>
  sub {
    my ($mce, $chunk_ref, $chunk_id) = @_;
    my @result;
    my @result_t;
    foreach my $task_set ( @{$chunk_ref} ) {
      my $mid;
      my @seq;
      my @seqnames;
      foreach my $task (@{$task_set}) {
	push @result_t, $task;
	my $id = $task->{seqname};
	my $seqname = $task->{seqname}.":".$task->{start}.",".$task->{end};
	push @seqnames, $seqname;
	$a->lock;
	my $db2 = Bio::DB::Fasta->new ("$fasta", '-reindex' => 0);
	my $x = $db2->seq($seqname);
	$a->unlock;
	$mid = $task->{ghmm};
	undef $db2;
	my $length = length($x);
	push @seq, ">".($task->{seqname})."\n".($x)."\n";

	if(!defined $x )
	{
	  print STDERR "error: $seqname \n";
	  next;
	}
	if($x =~ /^\s*$/) {
	  print STDERR "warning extracting: $seqname\n";
	  next;
	}
      }

      opendir (CWD, "$cwd") or die "Cant open $predictor/ghmm: $!\n";
      chdir(CWD); 
      close(CWD);

      my ($fh, $filename) = tempfile(
	SUFFIX   =>  '.tmp',
	UNLINK   =>  1,
	TEMPLATE =>  basename($0) . '-XXXXXXXXXXX');

      foreach my $s (@seq) {
	print $fh $s."\n";
      }
      close($fh);
      $filename = abs_path($filename);

      opendir (GHMM, "$predictor/ghmm.".$mid) or die "Cant open $predictor/ghmm: $!\n";
      chdir(GHMM); 
      # my $begin_time = clock_gettime();
      #print STDERR MCE->pid()." tops ".$filename." ".$begin_time."\n";
      my $output = `tops-viterbi_decoding -F -m $ghmm_model 2> /dev/null  < $filename`;
      my @out = split(/\n/, $output);
      # print STDERR MCE->pid()." ".(scalar(@out))." ".clock_gettime()."\n";
      #print STDERR MCE->pid()." EXIT tops ".((clock_gettime()- $begin_time))."\n";
      foreach my $got (@out){
	$got =~ /(.+):\s-.+:\t(.+)/;
	my $seqname  = $1;
	my @seq = split(/\s/, $2);
	my $length = $#seq + 1;
	push @result, "<$seqname:1,$length>,$got";
      }
      closedir(GHMM);

      unlink $filename;
    }
    MCE->gather($chunk_id, \@result_t, \@result);
  }
);


#my $begin_time = clock_gettime();
$mce2->run;
#print STDERR MCE->pid()." EXIT tops ".((clock_gettime()- $begin_time))."\n";
#print STDERR MCE->pid()." FINISHED ".((clock_gettime()- $begin_time2))."\n";

sub gc_content {
  my $seq = shift;
  my @seq = split(//, $seq);
  my $gc = 0.0;
  my $masked = 0;
  foreach my $n (@seq) {
    if( $n =~ /G|g|C|c/) {
      $gc ++;
    }
   if( ! $n =~ /A|C|G|T|a|c|g|t/ ) {
      $masked++;
   }
  }
  if(length ($seq) <= 0) {
    return 0.0;
  }
  return int(($gc / (length ($seq)-$masked)) * 100.0);
}


sub get_closest_ghmm_id {
  my $gc = shift;
  my $bands = $metapar{isochore_nband};
  my $maxgc = $metapar{isochore_max}* 100.0;
  my $mingc = $metapar{isochore_min}* 100.0;
  if($bands < 2) {
        $bands = 2;
  }
  my $increment = ($maxgc - $mingc)/($bands-1);

  my $min_diff = 10000;
  my $model_id = 0;
  for (my $i = 0; $i < $bands; $i++){
    my $band_center = $i*$increment + $mingc;
    my $diff =  ($band_center - $gc);
    if($diff < 0) { $diff = $diff *(-1); }
    if($diff < $min_diff) {
      $min_diff = $diff;
      $model_id =$i;
    }
  }
  return $model_id;
}

sub trim_spaces {
  my $v = shift;
  $v =~ s/^\s+//;     $v =~ s/\s+$//;
  return $v;
}



